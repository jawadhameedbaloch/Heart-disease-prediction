import streamlit as st
import joblib
import numpy as np
from fpdf import FPDF
from datetime import datetime

# Load model and scaler
model = joblib.load("model.pkl")
scaler = joblib.load("scaler.pkl")

st.set_page_config(page_title="Heart Disease Predictor", page_icon="ü´Ä")
st.title("ü´Ä Heart Disease Risk Predictor")

def int_input(label, min_value, max_value, value):
    return st.number_input(label, min_value=min_value, max_value=max_value, value=value, step=1, format="%d")

def float_input(label, min_value, max_value, value):
    return st.number_input(label, min_value=min_value, max_value=max_value, value=value, step=0.1, format="%.1f")

age = int_input("Age", 1, 120, 25)
resting_bp = int_input("Resting Blood Pressure", 50, 200, 120)
cholesterol = int_input("Cholesterol", 100, 400, 200)
fasting_bs = st.selectbox("Fasting Blood Sugar > 120 mg/dl", [0, 1])
max_hr = int_input("Maximum Heart Rate Achieved", 60, 220, 150)
oldpeak = float_input("Oldpeak (ST depression)", 0.0, 10.0, 1.0)

sex = st.radio("Sex", ["Male", "Female"])
sex_m = 1 if sex == "Male" else 0

cp = st.selectbox("Chest Pain Type", ["NAP", "ATA", "TA", "ASY"])
cp_ata = 1 if cp == "ATA" else 0
cp_nap = 1 if cp == "NAP" else 0
cp_ta = 1 if cp == "TA" else 0

restecg = st.selectbox("Resting ECG", ["Normal", "ST", "LVH"])
ecg_normal = 1 if restecg == "Normal" else 0
ecg_st = 1 if restecg == "ST" else 0

exang = st.radio("Exercise Induced Angina", ["Yes", "No"])
exang_y = 1 if exang == "Yes" else 0

slope = st.selectbox("ST Slope", ["Flat", "Up", "Down"])
slope_flat = 1 if slope == "Flat" else 0
slope_up = 1 if slope == "Up" else 0

features = [
    age, resting_bp, cholesterol, fasting_bs, max_hr, oldpeak,
    sex_m, cp_ata, cp_nap, cp_ta,
    ecg_normal, ecg_st, exang_y,
    slope_flat, slope_up
]

if st.button("üß¨ Predict Disease"):
    X = np.array(features).reshape(1, -1)
    X_scaled = scaler.transform(X)
    prediction = model.predict(X_scaled)[0]

    if prediction == 1:
        st.error("‚ö†Ô∏è High risk of heart disease. Please consult a cardiologist.")
        suggestion = (
            "Immediate medical consultation is advised. "
            "Maintain a heart-healthy diet, engage in doctor-approved exercise, manage stress levels, "
            "avoid smoking, and monitor your cardiovascular health regularly."
        )
        result_text = "High Risk"
        result_color = (255, 80, 80)
    else:
        st.success("‚úÖ Low risk of heart disease. Keep up the healthy lifestyle!")
        suggestion = (
            "Continue your current healthy lifestyle. "
            "Keep monitoring your health regularly, maintain regular exercise, "
            "follow a balanced diet, and avoid smoking or excessive alcohol consumption."
        )
        result_text = "Low Risk"
        result_color = (80, 200, 120)

    st.markdown(f"**AI Suggestion:** {suggestion}")

    # Generate Enhanced PDF Report
    class ModernPDF(FPDF):
        def header(self):
            # Gradient-like header with multiple rectangles
            colors = [
                (102, 126, 234),  # Primary
                (118, 75, 162),   # Secondary
            ]
            
            # Create gradient effect
            for i, color in enumerate(colors):
                self.set_fill_color(*color)
                self.rect(0, i*12, 210, 15, 'F')
            
            # Header text
            self.set_text_color(255, 255, 255)
            self.set_font('Arial', 'B', 24)
            self.set_y(8)
            self.cell(0, 10, 'HEART DISEASE PREDICTION REPORT', ln=True, align='C')
            
            # Subtitle
            self.set_font('Arial', '', 12)
            self.set_y(18)
            self.cell(0, 5, 'Advanced AI Cardiovascular Risk Assessment', ln=True, align='C')
            self.ln(10)
        
        def footer(self):
            # Only add footer if we're on the last page (page 2)
            if self.page_no() == 2:
                self.set_y(-25)
                # Footer background
                self.set_fill_color(240, 240, 240)
                self.rect(0, self.get_y()-5, 210, 20, 'F')
                
                self.set_text_color(102, 126, 234)
                self.set_font('Arial', 'I', 10)
                self.cell(0, 10, f'Generated on {datetime.now().strftime("%B %d, %Y at %I:%M %p")}', ln=True, align='C')
                self.cell(0, 5, 'This report is generated by AI and should be reviewed by a medical professional', align='C')
        
        def create_data_table(self, data_dict):
            # Table header
            self.set_fill_color(102, 126, 234)
            self.set_text_color(255, 255, 255)
            self.set_font('Arial', 'B', 12)
            self.cell(85, 10, 'Parameter', 1, 0, 'C', True)
            self.cell(45, 10, 'Value', 1, 0, 'C', True)
            self.cell(60, 10, 'Reference/Notes', 1, 1, 'C', True)
            
            # Table rows with alternating colors
            row_colors = [(248, 249, 250), (255, 255, 255)]
            self.set_text_color(0, 0, 0)
            self.set_font('Arial', '', 10)
            
            for i, (param, value, ref) in enumerate(data_dict):
                # Alternate row colors
                self.set_fill_color(*row_colors[i % 2])
                
                self.cell(85, 8, param, 1, 0, 'L', True)
                self.cell(45, 8, str(value), 1, 0, 'C', True)
                self.cell(60, 8, ref, 1, 1, 'L', True)
    
    # Create PDF
    pdf = ModernPDF()
    
    # PAGE 1 - Only Tables
    pdf.add_page()
    
    # Patient Information Section
    pdf.set_text_color(102, 126, 234)
    pdf.set_font('Arial', 'B', 16)
    pdf.cell(0, 12, 'PATIENT INFORMATION', ln=True)
    
    # Draw decorative line
    pdf.set_draw_color(102, 126, 234)
    pdf.set_line_width(1)
    pdf.line(10, pdf.get_y(), 200, pdf.get_y())
    pdf.ln(5)
    
    # Patient data table
    patient_data = [
        ('Age', f'{age} years', 'Normal adult range'),
        ('Sex', sex, 'Biological sex'),
        ('Chest Pain Type', cp, 'Type of chest pain experienced'),
    ]
    
    pdf.create_data_table(patient_data)
    pdf.ln(8)
    
    # Vital Signs Section
    pdf.set_text_color(102, 126, 234)
    pdf.set_font('Arial', 'B', 16)
    pdf.cell(0, 12, 'VITAL SIGNS & LABORATORY RESULTS', ln=True)
    
    pdf.set_draw_color(102, 126, 234)
    pdf.line(10, pdf.get_y(), 200, pdf.get_y())
    pdf.ln(5)
    
    # Vital signs data
    vital_data = [
        ('Resting Blood Pressure', f'{resting_bp} mmHg', 'Normal: <120 mmHg'),
        ('Cholesterol', f'{cholesterol} mg/dL', 'Normal: <200 mg/dL'),
        ('Fasting Blood Sugar', 'Yes' if fasting_bs == 1 else 'No', '>120 mg/dL'),
        ('Maximum Heart Rate', f'{max_hr} bpm', 'Age-predicted max'),
        ('Oldpeak (ST Depression)', f'{oldpeak}', 'Exercise-induced'),
        ('Exercise Induced Angina', exang, 'Chest pain during exercise'),
    ]
    
    pdf.create_data_table(vital_data)
    pdf.ln(8)
    
    # Medical Tests Section
    pdf.set_text_color(102, 126, 234)
    pdf.set_font('Arial', 'B', 16)
    pdf.cell(0, 12, 'MEDICAL TEST RESULTS', ln=True)
    
    pdf.set_draw_color(102, 126, 234)
    pdf.line(10, pdf.get_y(), 200, pdf.get_y())
    pdf.ln(5)
    
    # Medical test data
    medical_data = [
        ('Resting ECG', restecg, 'Electrocardiogram at rest'),
        ('ST Slope', slope, 'Exercise ST segment slope'),
    ]
    
    pdf.create_data_table(medical_data)
    
    # PAGE 2 - All other content
    pdf.add_page()
    
    # Prediction Result Section
    pdf.set_fill_color(*result_color)
    pdf.set_text_color(255, 255, 255)
    pdf.set_font('Arial', 'B', 18)
    pdf.cell(0, 15, f'PREDICTION RESULT: {result_text.upper()}', ln=True, align='C', fill=True)
    pdf.ln(5)
    
    # Risk level explanation
    pdf.set_fill_color(245, 245, 245)
    pdf.set_text_color(0, 0, 0)
    pdf.set_font('Arial', 'B', 14)
    pdf.cell(0, 10, 'Risk Assessment Details', ln=True, fill=True)
    
    pdf.set_font('Arial', '', 11)
    risk_explanation = (
        f"Based on the comprehensive analysis of {len(features)} cardiovascular risk factors, "
        f"our advanced AI model has classified this case as {result_text.lower()} for heart disease. "
        "This assessment considers multiple clinical parameters including demographics, "
        "vital signs, laboratory results, and diagnostic test outcomes."
    )
    
    pdf.multi_cell(0, 6, risk_explanation)
    pdf.ln(5)
    
    # AI Recommendations Section
    pdf.set_fill_color(116, 185, 255)
    pdf.set_text_color(255, 255, 255)
    pdf.set_font('Arial', 'B', 14)
    pdf.cell(0, 10, 'AI HEALTH RECOMMENDATIONS', ln=True, align='C', fill=True)
    pdf.ln(2)
    
    pdf.set_text_color(0, 0, 0)
    pdf.set_font('Arial', '', 11)
    safe_suggestion = suggestion.encode("latin-1", "ignore").decode("latin-1")
    pdf.multi_cell(0, 6, safe_suggestion)
    pdf.ln(10)
    
    # Disclaimer Section
    pdf.set_fill_color(255, 243, 205)
    pdf.set_text_color(102, 77, 3)
    pdf.set_font('Arial', 'B', 12)
    pdf.cell(0, 8, 'IMPORTANT MEDICAL DISCLAIMER', ln=True, align='C', fill=True)
    pdf.ln(5)
    
    pdf.set_font('Arial', '', 10)
    disclaimer = (
        "This AI-generated report is for informational purposes only and should not replace "
        "professional medical advice, diagnosis, or treatment. Always consult with qualified "
        "healthcare professionals for medical decisions. The AI model has limitations and "
        "should be used as a supplementary tool in clinical decision-making."
    )
    pdf.multi_cell(0, 5, disclaimer)
    
    # Save PDF
    pdf_output = "heart_report.pdf"
    pdf.output(pdf_output)
    
    # Download button
    with open(pdf_output, "rb") as file:
        st.download_button(
            "Download Report", 
            file, 
            file_name="heart_disease_report.pdf",
            mime="application/pdf"
        )